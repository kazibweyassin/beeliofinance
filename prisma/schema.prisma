// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  country       String?
  password      String?   // For credentials provider
  role          UserRole  @default(BORROWER)
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Borrower-specific fields
  monthlyIncome     Float?
  employmentStatus  String?
  creditScore       Int?
  
  // Lender-specific fields
  investmentAmount  Float?
  riskTolerance     String?
  investmentGoals   String?

  accounts Account[]
  sessions Session[]

  // Custom fields for Beelio
  loans           Loan[]
  investments     Investment[]
  kycDocuments   KycDocument[]
  transactions   Transaction[]
  notifications  Notification[]
  repayments     Repayment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Beelio-specific models
model Loan {
  id            String   @id @default(cuid())
  borrowerId    String
  amount        Float
  interestRate  Float
  duration      Int      // in months
  purpose       String
  status        LoanStatus @default(PENDING)
  description   String?
  riskScore     Float?   // Calculated risk score
  fundedAmount  Float    @default(0) // Amount funded so far
  isApproved    Boolean  @default(false)
  approvedAt    DateTime?
  approvedBy    String?  // Admin user ID
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  borrower User @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  investments Investment[]
  repayments  Repayment[]
}

model Investment {
  id        String   @id @default(cuid())
  investorId String
  loanId    String
  amount    Float
  status    InvestmentStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  investor User @relation(fields: [investorId], references: [id], onDelete: Cascade)
  loan     Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

// KYC Verification Models
model KycDocument {
  id          String   @id @default(cuid())
  userId      String
  type        KycDocumentType
  fileName    String
  fileUrl     String
  status      KycStatus @default(PENDING)
  uploadedAt  DateTime @default(now())
  verifiedAt  DateTime?
  verifiedBy  String?  // Admin user ID
  rejectionReason String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Payment & Transaction Models
model Transaction {
  id            String   @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Float
  currency      String   @default("UGX")
  status        TransactionStatus @default(PENDING)
  reference     String?  // External payment reference
  description   String?
  metadata      Json?    // Additional transaction data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Optional relations
  loanId        String?
  investmentId  String?
  repaymentId   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Repayment Models
model Repayment {
  id            String   @id @default(cuid())
  loanId        String
  borrowerId    String
  amount        Float
  dueDate       DateTime
  paidDate      DateTime?
  status        RepaymentStatus @default(PENDING)
  lateFee       Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  loan     Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
  borrower User @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
}

// Notification Models
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json?    // Additional notification data
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LoanStatus {
  PENDING
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

enum UserRole {
  BORROWER
  LENDER
}

enum InvestmentStatus {
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

enum KycDocumentType {
  NATIONAL_ID_FRONT
  NATIONAL_ID_BACK
  PASSPORT
  DRIVERS_LICENSE
  UTILITY_BILL
  BANK_STATEMENT
  SELFIE
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  LOAN_REQUEST
  INVESTMENT
  REPAYMENT
  REFUND
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum RepaymentStatus {
  PENDING
  PAID
  OVERDUE
  DEFAULTED
}

enum NotificationType {
  LOAN_APPROVED
  LOAN_REJECTED
  INVESTMENT_RECEIVED
  REPAYMENT_DUE
  PAYMENT_RECEIVED
  KYC_APPROVED
  KYC_REJECTED
  GENERAL
}
